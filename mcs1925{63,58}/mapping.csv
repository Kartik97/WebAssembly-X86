name,type,mapping,Parameters,noParam,,
i32.clz,27,LZCNT,"LZCNT A,B",2,,
i32.ctz,27,TZCNT,"TZCNT A,B",2,,
i32.popcnt,27,POPCNT,POPCNT A,1,,
i32.add,27,ADD,"ADD A,B",2,,
i32.sub,27,SUB,"SUB A,B",2,,
i32.mul,27,IMUL,"IMUL A,B",2,,
i32.div_s,27,IDIV,"IDIV A,B",2,,
i32.div_u,27,DIV,"DIV A,B",2,,
i32.rem_s,27,FPREM,,,,
i32.rem_u,27,FPREM1,,,,
i32.and,27,AND,"AND A,B",2,,
i32.or,27,OR,"OR A,B",2,,
i32.xor,27,XOR,"XOR A,B",2,,
i32.shl,27,SHL,SHL A,1,,
i32.shr_s,27,SAR,"SAR A,B",2,,
i32.shr_u,27,SHR,"SHR A,B",2,,
i32.rotl,27,ROL,"ROL A,B",2,,
i32.rotr,27,ROR,"ROR A,B",2,,
i32.eqz,27,CMP,"MOV AX,A;CMP AX,0",2,,
i32.eq,27,CMP,"MOV AX,A;CMP AX, B",2,,
i32.ne,27,FICOM,FICOM A,1,,
i32.lt_s,27,FICOM,,,,
i32.lt_u,27,FICOM,,,,
i32.gt_s,27,FICOM,,,,
i32.gt_u,27,FICOM,,,,
i32.le_s,27,FICOM,,,,
i32.le_u,27,FICOM,,,,
i32.ge_s,27,FICOM,,,,
i32.ge_u,27,FICOM,,,,
i32.const,27,EQU,,,,
i32.wrap_i64,27,NONE,,,,
i32.trunc_f32_s,27,CVTTSD2SI ,CVTTSD2SI A B,,,
i32.trunc_f32_u,27,VCVTSS2USI,VCVTSS2USI A B,,,
i32.trunc_f64_s,27,CVTTSD2SI ,CVTTSD2SI A B,,,
i32.trunc_f64_u,27,VCVTSS2USI,VCVTSS2USI A B,,,
i32.reinterpret_f32,27,NONE,FRNDINT A,,,
i32.reinterpret_f64,27,NONE,FRNDINT A,,,
i64.clz,27,LZCNT,"LZCNT A,B",2,,
i64.ctz,27,TZCNT,"TZCNT A,B",2,,
i64.popcnt,27,POPCNT,"POPCNT A,B",2,,
i64.add,27,ADD,"ADD A,B",2,,
i64.sub,27,SUB,"SUB A,B",2,,
i64.mul,27,IMUL,"IMUL A,B",2,,
i64.div_s,27,IDIV,"IDIV A,B",2,,
i64.div_u,27,DIV,"DIV A,B",2,,
i64.rem_s,27,FPREM,,,,
i64.rem_u,27,FPREM1,,,,
i64.and,27,AND,"AND A,B",,,
i64.or,27,OR,"OR A,B",2,,
i64.xor,27,XOR,"XOR A,B",2,,
i64.shl,27,SHL,SHL A,2,,
i64.shr_s,27,SAR,"SAR A, B",2,,
i64.shr_u,27,SHR,"SHR A, B",2,,
i64.rotl,27,ROL,"ROL A,B",2,,
i64.rotr,27,ROR,"ROR A,B",2,,
i64.eqz,27,CMP,"MOV AX,A;CMP A,0",2,,
i64.eq,27,CMP,"MOV AX,A;CMP A,B",2,,
i64.ne,27,FICOM,,,,
i64.lt_s,27,FICOM,,,,
i64.lt_u,27,FICOM,,,,
i64.gt_s,27,FICOM,,,,
i64.gt_u,27,FICOM,,,,
i64.le_s,27,FICOM,,,,
i64.le_u,27,FICOM,,,,
i64.ge_s,27,FICOM,,,,
i64.ge_u,27,FICOM,,,,
i64.const,27,EQU,,,,
i64.trunc_f32_s,27,CVTTSD2SI ,,,,
i64.trunc_f32_u,27,VCVTSS2USI,,,,
i64.trunc_f64_s,27,CVTTSD2SI ,,,,
i64.trunc_f64_u,27,VCVTSS2USI,,,,
i64.extend_i32_s,27,NONE,,,,
i64.reinterpret_f32,27,NONE,,,,
i64.reinterpret_f64,27,NONE,,,,
f32.abs,,FABS,FABS A,1,,
f32.neg,,NEG,NEG A,1,,
f32.sqrt,,FSQRT,FSQRT A,1,,
f32.ceil,,ROUNDPD,"ROUNDPD A,B,C",3,,
f32.floor,,ROUNDPD,"ROUNDPD A,B,C",3,,
f32.trunc,,FRNDINT,FRNDINT A,1,,
f32.nearest,,FRNDINT,FRNDINT A,1,,
f32.add,,FADD,"FADD A,B",2,,
f32.sub,,FSUB ,"FSUB A,B",2,,
f32.mul,,FMUL,"FMUL A,B",2,,
f32.div,,FDIV ,"FDIV A,B",2,,
f32.min,,PMINSW,,,,
f32.max,,PMANSW,,,,
f32.copysign,,CPYS,,,,
f32.eq,,FCOM,FCOM a,,,
f32.ne,,FCOM,FCOM a,,,
f32.lt,,FCOM,FCOM a,,,
f32.gt,,FCOM,FCOM a,,,
f32.le,,FCOM,FCOM a,,,
f32.ge,,FCOM,FCOM a,,,
f32.const,,EQU,,,,
f32.demote_f64,,NONE,CVTSD2SS //Doubt,2,,
f32.convert_i32_s,,NONE,VCVTUSI2SS //Doubt,,,
f32.convert_i32_u,,NONE,VCVTUSI2SD //doubt,3,,
f32.convert_i64_s,,NONE,VCVTUSI2SS //doubt,,,
f32.convert_i64_u,,NONE,VCVTUSI2SD //doubt,2,,
f32.reinterpret_i32,,FRNDINT,,,,
f32.reinterpret_i64,,FRNDINT,,,,
f64.abs,,FABS,FABS A,1,,
f64.neg,,NEG,NEG A ,1,,
f64.sqrt,,FSQRT,FSQRT A,1,,
f64.ceil,,ROUNDPD,"ROUNDPD A,B,C",3,,
f64.floor,,ROUNDPD,"ROUNDPD A,B,C",3,,
f64.trunc,,FRNDINT,FRNDINT A,1,,
f64.nearest,,FRNDINT,FRNDINT A,1,,
f64.add,,FADD,"FADD A,B",2,,
f64.sub,,FSUB,"FSUB A,B ",2,,
f64.mul,,FMUL,"FMUL A,B ",2,,
f64.div,,FDIV ,"FDIV A,B",2,,
f64.min,,MINSD,"MINSD xmm1, xmm2",,,
f64.max,,MAXSD,"MAXSD xmm1, xmm2",,,
f64.copysign,,NONE,,,,
f64.eq,,FCOM,FCOM a,,,
f64.ne,,FCOM,FCOM a,,,
f64.lt,,FCOM,FCOM a,,,
f64.gt,,FCOM,FCOM a,,,
f64.le,,FCOM,FCOM a,,,
f64.ge,,FCOM,FCOM a,,,
f64.const,,EQU,,,,
f64.promote_f32,,NONE,,,,
f64.convert_i32_s,,NONE,,,,
f64.convert_i32_u,,NONE,,,,
f64.convert_i64_s,,NONE,,,,
f64.convert_i64_u,,NONE,,,,
f64.reinterpret_i32,,NONE,,,,
f64.reinterpret_i64,,NONE,,,,
local.get,,MOV,,,,
local.set,27,MOV,"MOV A,B",2,,
global.get,,MOV,,,,
global.set,,MOV,,,,
local.tee,,NONE,,,,
nop,,NOP,NOP,,,
unreachable,,UD2,UD2,,,
block ,,BEGIN,,,block resultInst end,
loop,,LOOP,,1,loop resultInst end,
if_,,JMP,"CMP j1, j2
JG LABEL1",,if resultInst else Inst end,
else,,ELSE,ELSE LABEL2,,,
br,27,JMP,JMP A,,br labelidx,labelidx is index = u32 
br_if,,JMP,JRCXZ a,,br_if labelidx,labelidx is index = u32
br_table,,NONE,,,br_table vec(labelidx) labelidx,
return,,RET,RET,,,
end,,END,END,,,
call,,CALL,CALL A(func name),,call funcidx,
call_indirect,,CALLQ,CALLQ (instruction pointer + relocation address),,call_indirect typeidx,
drop,,NONE,,,,
select,,CMP,"CMP j1, j2JG LABEL1",,,
memory.size,,NONE,,,,
memory.grow,,NONE,,,,
i32.load,,MOV,,,,
i32.load8_s,2,MOV,,,,
i32.load8_u,2,MOV,,,,
i32.load16_s,2,MOV,,,,
i32.load16_u,2,MOV,,,,
i32.store,3,MOV,,,,
i32.store8_s,3,MOV,,,,
i32.store8_u,3,MOV,,,,
i32.store16_s,3,MOV,,,,
i32.store16_u,3,MOV,,,,
i64.load,2,MOV,,,,
i64.store,3,MOV,,,,
i64.load32_s,2,MOV,,,,
i64.load32_u,2,MOV,,,,
i64.store32,3,MOV,,,,
f32.load,2,MOV,,,,
f32.store,3,MOV,,,,
f64.load,2,MOV,,,,
f64.store,3,MOV,,,,
begin,,BEGIN,,,,
